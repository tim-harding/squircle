---
---

@property --subtext-1 {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --subtext-0 {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --overlay-2 {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --overlay-1 {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --overlay-0 {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --surface-2 {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --surface-1 {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --surface-0 {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --base {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --mantle {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --crust {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --rosewater {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --flamingo {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --pink {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --mauve {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --red {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --maroon {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --peach {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --yellow {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --green {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --teal {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --sky {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --sapphire {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --blue {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}
@property --lavender {
  syntax: "<color>";
  inherits: true;
  initial-value: transparent;
}

:where(:not(html, head *, svg *)) {
  all: unset;
}

*,
*::after,
*::before {
  box-sizing: border-box;
}

a,
button,
th-theme-button {
  cursor: pointer;
}

button,
th-theme-button {
  user-select: none;
}

::selection {
  background-color: var(--rosewater);
  color: var(--base);
}

input[type="range"] {
  &::-moz-range-thumb,
  &::-webkit-slider-thumb {
    all: unset;
    width: 1.25rem;
    height: 1.25rem;
    border-radius: 50%;
    background: linear-gradient(var(--rosewater), var(--flamingo));
    box-shadow: 0rem 0.125rem 0.25rem (#d20f3950);
  }

  &::-webkit-slider-runnable-track,
  &::-moz-range-track {
    box-sizing: border-box;
    width: 100%;
    height: 0.375rem;
    border-radius: calc(0.375rem / 2);
    background-color: var(--surface-0);
    border: 1px solid var(--surface-1);
  }
}

input[type="color"] {
  width: 100%;
  border-radius: 0.25rem;

  &::-webkit-color-swatch-wrapper {
    all: unset;
  }

  &::-webkit-color-swatch,
  &::-moz-color-swatch {
    border: none;
  }
}

.sr {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

.theme-latte {
  --text: #4c4f69;
  --subtext-1: #5c5f77;
  --subtext-0: #6c6f85;
  --overlay-2: #7c7f93;
  --overlay-1: #8c8fa1;
  --overlay-0: #9ca0b0;
  --surface-2: #acb0be;
  --surface-1: #bcc0cc;
  --surface-0: #ccd0da;
  --base: #eff1f5;
  --mantle: #e6e9ef;
  --crust: #dce0e8;
  --rosewater: #dc8a78;
  --flamingo: #dd7878;
  --pink: #ea76cb;
  --mauve: #8839ef;
  --red: #d20f39;
  --maroon: #e64553;
  --peach: #fe640b;
  --yellow: #df8e1d;
  --green: #40a02b;
  --teal: #179299;
  --sky: #04a5e5;
  --sapphire: #209fb5;
  --blue: #1e66f5;
  --lavender: #7287fd;
}

.theme-frappe {
  --text: #c6d0f5;
  --subtext-1: #b5bfe2;
  --subtext-0: #a5adce;
  --overlay-2: #949cbb;
  --overlay-1: #838ba7;
  --overlay-0: #737994;
  --surface-2: #626880;
  --surface-1: #51576d;
  --surface-0: #414559;
  --base: #303446;
  --mantle: #292c3c;
  --crust: #232634;
  --rosewater: #f2d5cf;
  --flamingo: #eebebe;
  --pink: #f4b8e4;
  --mauve: #ca9ee6;
  --red: #e78284;
  --maroon: #ea999c;
  --peach: #ef9f76;
  --yellow: #e5c890;
  --green: #a6d189;
  --teal: #81c8be;
  --sky: #99d1db;
  --sapphire: #85c1dc;
  --blue: #8caaee;
  --lavender: #babbf1;
}

body {
  display: grid;
  grid-template-rows: max-content 1fr;
  grid-template-columns: 1fr 2rem minmax(0rem, 52rem) 2rem 1fr;
  grid-template-areas:
    "header header header header header"
    ". . main . .";
  background-color: var(--base);
  color: var(--text);
  font-family: "Poppins", sans-serif;
  font-weight: 400;
  font-style: normal;
  transition-property: --text --subtext-1 --subtext-0 --overlay-2 --overlay-1
    --overlay-0 --surface-2 --surface-1 --surface-0 --base --mantle --crust
    --rosewater --flamingo --pink --mauve --red --maroon --peach --yellow
    --green --teal --sky --sapphire --blue --lavender;
  transition-duration: 250ms;
  overflow-x: hidden;
}

header {
  grid-area: header;
  display: grid;
  grid-template-columns: [title-start] max-content 1fr max-content [title-end];
  grid-template-rows: [title-start] 9.5rem [title-end];
  grid-template-areas: "banner . theme-button";
}

h1 {
  grid-area: title;
  justify-self: center;
  font-weight: 900;
  font-size: 3rem;
  width: 100%;
  text-align: center;
  margin-top: 2rem;
}

th-theme-button {
  grid-area: theme-button;
  display: grid;
  grid-template-rows: 100%;
  grid-template-columns: 100% 100%;
  place-content: stretch;
  overflow: hidden;
  width: 2.25rem;
  height: 2.25rem;
  margin: 1rem 1rem 0rem 0rem;
  background-color: var(--surface-0);
  border: 2px solid var(--surface-1);
  border-radius: 0.25rem;

  & > div {
    display: grid;
    place-items: center;
    transition: transform 250ms;

    & > svg {
      fill: var(--text);
      stroke: var(--text);
    }
  }

  &.dark > div {
    transform: translateX(-100%);
  }
}

.github-banner {
  grid-area: banner;
  display: grid;
  grid-template-columns: 0.25rem 1fr;
  grid-template-rows: 0.25rem 1fr;
  grid-template-areas: ". ." ". logo";
  left: 0rem;
  top: 0rem;
  background-color: var(--surface-2);
  width: 5rem;
  height: 5rem;
  clip-path: polygon(0% 0%, 100% 0%, 0% 100%);
}

.github-logo {
  grid-area: logo;
  height: 2.65rem;
  aspect-ratio: 98/96;
  transform: rotate(-45deg);
  fill: var(--base);
}

main {
  grid-area: main;
  display: grid;
  grid-template-rows: 1fr;
  grid-template-columns: 1fr;
  grid-template-areas: "tester";
}

ce-squircle {
  display: grid;
  contain: strict;
  pointer-events: none;
}

th-tester {
  grid-area: tester;
  display: grid;
  grid-template-rows: minmax(32rem, 1fr);
  grid-template-columns: 1fr 16rem;
  grid-template-areas: "drag-area form";
  gap: 2rem;

  & > form {
    grid-area: form;
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: repeat(4, max-content);
    row-gap: 1rem;
    grid-auto-rows: max-content;
  }
}

th-drag-area {
  position: relative;
  grid-area: "drag-area";
  background-color: var(--mantle);
  border: 1px solid var(--crust);

  & > ce-squircle {
    position: absolute;
  }
}

th-control {
  display: grid;
  grid-template-rows: 2rem 1.5rem;
  grid-template-columns: 1fr;
  grid-template-areas: "label" "input";
  align-items: center;

  & > label {
    grid-area: label;
    font-weight: 500;
  }

  & > input {
    grid-area: input;
    width: 100%;
    height: 100%;
  }
}

th-corner {
  position: absolute;
  display: grid;
  place-items: center;
  width: 5rem;
  height: 5rem;
  transform: translateX(-50%) translateY(-50%);

  &:hover::after {
    transform: scale(1.5);
    background-color: var(--sky);
  }

  &::after {
    content: "";
    background-color: var(--overlay-2);
    opacity: 30%;
    border-radius: 50%;
    width: 1.5rem;
    height: 1.5rem;
    transition-property: transform background-color;
    transition-duration: 250ms;
  }
}

@media (max-width: 740px) {
  th-tester {
    grid-template-columns: 1fr;
    grid-template-rows: 32rem min-content;
    grid-template-areas: "drag-area" "form";

    & > form {
      grid-template-columns: 1fr 1fr;
      grid-template-rows: 1fr 1fr;
      row-gap: 1rem;
      column-gap: 2rem;
    }
  }
}

@media (max-width: 480px) {
  th-tester {
    & > form {
      grid-template-columns: 1fr;
      grid-template-rows: repeat(4, 1fr);
    }
  }
}
